name: docker

on:
  # Run every morning at 4:18am to automatically stay up to date
  schedule:
    - cron: "18 4 * * *"
  # Run when any of the build setup changes
  push:
    branches: [master]
    paths-ignore:
      - '**/**.md'
      - '.gitignore'
  # Also allow manual runs
  workflow_dispatch:

env:
  PLATFORMS: linux/arm64/v8,linux/amd64
  IMAGE_NAME: "portalknights-server"
  BUILD_IMAGE: "true"
  BUILD_ID: "none"

jobs:
  check-build:
    name: Check for Portal Knights updates
    runs-on: ubuntu-latest
    steps:
      - id: build-id
        name: Get current build ID for Portal Knights
        run: |
          BUILD_ID=$(curl https://api.steamcmd.net/v1/info/374040 \
          | jq '.data."374040".depots.branches.public.buildid' \
          | sed s/\"//g) \
          && echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV

      - id: check-image
        name: Check whether ${{ env.IMAGE_NAME }}:${{ env.BUILD_ID }} exists"
        run: |
          # Check whether there already is a Docker image for the current tag
          IMAGE_TAGS=$(curl -s https://registry.hub.docker.com/v1/repositories/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}/tags | jq -r ".[].name") || IMAGE_TAGS="none"
          for tag in ${IMAGE_TAGS[@]}; do
            if [[ "$tag" == " ${{ env.BUILD_ID }}" ]]; then
              echo "Image for build ${tag} already exists."
              echo "BUILD_IMAGE=false" >> $GITHUB_ENV
              exit
            fi
          done

  download-server:
    needs: check-build
    name: Download and store dedicated server
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        name: Check out code

      - id: download-server
        name: Download Portal Knights dedicated server
        if: ${{ env.BUILD_IMAGE == 'true' }}
        run: |
          docker build -f download-dedicated-server.Dockerfile \
          --build-arg STEAM_USERNAME=${{ secrets.STEAM_USERNAME }} \
          --build-arg STEAM_PASSWORD=${{ secrets.STEAM_PASSWORD }}
          --output type=local,dest=output \
          .

      - id: store-server
        if: ${{ env.BUILD_IMAGE == 'true' }}
        name: Store Portal Knights dedicated server
        uses: actions/upload-artifact@v3
        with:
          name: pk-dedicated-server-${{ env.BUILD_ID }}.zip
          path: output/dedicated_server.zip

  build-image:
    name: Build dedicated server Docker image
    needs: download-server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Check out code

      - name: Generate datestamp
        if: ${{ env.BUILD_IMAGE == 'true' }}
        run: |
          DATESTAMP=$(date +%Y-%m-%d)
          echo "DATESTAMP=${DATESTAMP}" >> $GITHUB_ENV

      - id: download-server
        name: Download stored server for ${{ env.BUILD_ID }}
        if: ${{ env.BUILD_IMAGE == 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: pk-dedicated-server-${{ env.BUILD_ID }}.zip

      - id: unzip-server
        if: ${{ env.BUILD_IMAGE == 'true' }}
        name: Unzip dedicated server
        run: unzip -d dedicated_server pk-dedicated-server-${{ env.BUILD_ID }}.zip

      - name: Generate Docker image metadata
        if: ${{ env.BUILD_IMAGE == 'true' }}
        id: docker-meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,${{ env.BUILD_ID }}
            type=raw,${{ env.DATESTAMP }}
            type=raw,latest

      - name: Setup QEMU
        if: ${{ env.BUILD_IMAGE == 'true' }}
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker BuildKit
        if: ${{ env.BUILD_IMAGE == 'true' }}
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        if: ${{ env.BUILD_IMAGE == 'true' }}
        uses: docker/login-action@v2 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        if: ${{ env.BUILD_IMAGE == 'true' }}
        uses: docker/login-action@v2 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push ${{ env.IMAGE_NAME }}:${{ env.VELOREN_VERSION }} Docker image
        if: ${{ env.BUILD_IMAGE == 'true' }}
        uses: docker/build-push-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}
          file: Dockerfile
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
